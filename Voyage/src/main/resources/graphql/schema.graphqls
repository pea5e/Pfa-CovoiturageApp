
type Mutation {
    saveVoyage(voyage:VoyageDTO):String
    pay(payment:PaymentDTO):String
}

type Query {
    getVoyages:[Voyage]
}

type Subscription {
    getVoyager(count : Int):String
}

scalar DateTime

input VoyageDTO {
    destinationX:Float
    destinationY :Float
    emplacementX: Float
    emplacementY :Float
    labelDestination: String
    labelEmplacement: String
    Tarif: Float
    Duree:Int
    Distance:Int
    time:DateTime
}

input PaymentDTO {
    Nom: String
    Card: String
    Expiry: String
    Security: String
    VoyageID: Float
}


type User {
    id:Float
    nom:String
    password:String
    email:String
    prenom:String
    telephone:String
    sexe:Gender
    age:Int
    cin:String
    nombre_voya:Int
    banned:Boolean
}

enum Gender {
    Homme
    Femme
}


type Voyage{
    id:Float
    Destination:Coordinates
    Emplacement:Coordinates
    Tarif:Float
    Duree:Int
    Distance:Int
    review:Int
    driver:User
    UserId:Float
    time:DateTime
}

type Coordinates{
    x: Float
    y: Float
    Label: String
}

